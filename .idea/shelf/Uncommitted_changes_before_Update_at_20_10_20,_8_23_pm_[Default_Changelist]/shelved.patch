Index: src/comp1110/ass2/gui/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package comp1110.ass2.gui;\n\nimport comp1110.ass2.FitGame;\nimport comp1110.ass2.Games;\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.geometry.Insets;\nimport javafx.scene.Group;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.MouseButton;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.paint.Color;\nimport javafx.scene.text.Font;\nimport javafx.scene.text.FontWeight;\nimport javafx.scene.text.Text;\nimport javafx.scene.text.TextAlignment;\nimport javafx.scene.transform.Rotate;\nimport javafx.scene.transform.Translate;\nimport javafx.stage.Stage;\n\nimport java.util.*;\n\npublic class Board extends Application {\n\n    private static final int BOARD_WIDTH = 600;\n    private static final int BOARD_HEIGHT = 300;\n\n    // FIXME Task 7: Implement a basic playable Fix Game in JavaFX that only allows pieces to be placed in valid places\n\n    // FIXME Task 8: Implement challenges (you may use assets provided for you in comp1110.ass2.gui.assets)\n\n    // FIXME Task 10: Implement hints (should become visible when the user presses '/' -- see gitlab issue for details)\n\n    // FIXME Task 11: Generate interesting challenges (each challenge may have just one solution)\n\n    // Fields we need:\n    private static final int VIEWER_WIDTH = 933;\n    private static final int VIEWER_HEIGHT= 700;\n    private static final int BOARD_X = 50;  // horizontal distance from board to left boundary\n    private static final int BOARD_Y = 150;  // vertical distance from board to top boundary\n    private static final int PIECE_WIDTH = 51;  // piece width in GUI\n    private static final int SELECT_X = 700;  // X coordinate of the SELECT Menu\n    private static final int SELECT_Y = 50;  // y coordinate of the SELECT Menu\n    private static final int SELECT_WIDTH = 180;  // width of the SELECT Menu\n    private static final int SELECT_HEIGHT = 500;  // height of the SELECT Menu\n    private static final int SELECT_GAP = 10;  // GAP of the SELECT Menu\n\n    private final Group root = new Group();\n    private final Group pieces = new Group();\n    private final Group controls = new Group();\n    private final Group board = new Group();\n    private final Group selectM = new Group();\n\n\n\n    // where to find media assets\n    private static final String URI_BASE = \"assets/\";\n    private static final String BASEBOARD_URI = Board.class.getResource(URI_BASE + \"board.png\").toString();\n    // the difficulty slider\n    private final Slider difficulty = new Slider();\n    // message on completion\n    private final Text completionText = new Text(\"Well done!\");\n    private static String tempGame;\n    private static String GameSolution;\n    private static String Game;\n\n\n\n    private void makeBoard(){\n        board.getChildren().clear();\n        ImageView baseboard = new ImageView();\n        baseboard.setImage(new Image(BASEBOARD_URI));\n//        baseboard.setPreserveRatio(true);\n        baseboard.setFitWidth(BOARD_WIDTH);\n        baseboard.setFitHeight(BOARD_HEIGHT);\n        baseboard.setLayoutX(BOARD_X);\n        baseboard.setLayoutY(BOARD_Y);\n        board.getChildren().add(baseboard);\n        board.toBack();\n    }\n    // Put each of the initial pieces on the board based on the string of initialState\n    private void makePiece(String placement){\n        pieces.getChildren().clear();\n        for (int i=0; i<placement.length()/4;++i){\n            String PiecePlacement = placement.substring(4*i,4*(i+1));\n            Character[] arr1 = {'b','o','p','r','s','y'};\n            Set<Character> setFour = new HashSet<>(Arrays.asList(arr1));\n            char color = PiecePlacement.charAt(0);\n            char rotate = PiecePlacement.charAt(3);\n            int x = Character.getNumericValue(PiecePlacement.charAt(1));\n            int y = Character.getNumericValue(PiecePlacement.charAt(2));\n            String type;\n            if (Character.isLowerCase(color)){ type = String.valueOf(color).toUpperCase()+\"1\";}\n            else{type = String.valueOf(color).toUpperCase()+\"2\";}\n            Image image = new Image(Board.class.getResource(URI_BASE + type + \".png\").toString());\n            ImageView imagePiece = new ImageView(image);\n            if (setFour.contains(Character.toLowerCase(color))){\n                imagePiece.setFitHeight(102);\n                imagePiece.setFitWidth(204);\n            }else{\n                imagePiece.setFitHeight(102);\n                imagePiece.setFitWidth(153);\n            }\n            imagePiece.setX(90+x*PIECE_WIDTH);\n            imagePiece.setY(165+y*PIECE_WIDTH);\n            Rotate rot = new Rotate();\n            Translate translate = new Translate();\n            if (rotate == 'E'){\n                rot.setAngle(90);\n                rot.setPivotX(imagePiece.getX()+imagePiece.getFitHeight());\n                rot.setPivotY(imagePiece.getY());\n                translate.setX(imagePiece.getFitHeight());\n                imagePiece.getTransforms().addAll(rot,translate);\n            }\n            else if (rotate == 'S'){\n                rot.setAngle(180);\n                rot.setPivotX(imagePiece.getX()+imagePiece.getFitWidth());\n                rot.setPivotY(imagePiece.getY()+imagePiece.getFitHeight());\n                translate.setX(imagePiece.getFitWidth());\n                translate.setY(imagePiece.getFitHeight());\n                imagePiece.getTransforms().addAll(rot,translate);\n            }\n            else if (rotate == 'W'){\n                rot.setAngle(270);\n                rot.setPivotX(imagePiece.getX());\n                rot.setPivotY(imagePiece.getY()+imagePiece.getFitWidth());\n                translate.setY(imagePiece.getFitWidth());\n                imagePiece.getTransforms().addAll(rot,translate);\n            }\n            pieces.getChildren().add(imagePiece);\n        }\n\n    }\n    private void delete(){\n        pieces.setOnMouseClicked(e -> {\n            if (e.getButton() == MouseButton.PRIMARY){\n                double posX = e.getX() - 90;\n                double posY = e.getY() - 165;\n                if( posX / PIECE_WIDTH < 10 && posY / PIECE_WIDTH < 5){\n                    String a = FitGame.findPieceSpotOnBoard(tempGame,(int) posY / PIECE_WIDTH,(int) posX / PIECE_WIDTH);\n                    if( a != null ){\n                        if(!Game.contains(a)){\n                            tempGame = FitGame.sortDelete(tempGame, a);\n                            assert tempGame != null;\n                            makePiece(tempGame);\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Put possible pieces on the select menu based on the string of initialState\n    private void makeSelect(){\n        GridPane selectMenu = new GridPane();\n        selectMenu.setPadding(new Insets(10,10,10,10));\n        selectMenu.setVgap(SELECT_GAP);\n        selectMenu.setHgap(SELECT_GAP);\n        selectMenu.setPrefSize(SELECT_WIDTH, SELECT_HEIGHT);\n        selectMenu.setLayoutX(SELECT_X);\n        selectMenu.setLayoutY(SELECT_Y);\n\n        String[] T = {\"B\",\"G\",\"I\",\"L\",\"N\",\"O\",\"P\",\"R\",\"S\",\"Y\"};\n        List<String> A = Arrays.asList(T);\n        ArrayList<String> allType = new ArrayList<>(A);\n        for(int j=0; j < allType.size();j++){\n            String type1 = allType.get(j)+\"1\";\n            Image input = new Image(Board.class.getResource(URI_BASE + type1 + \".png\").toString());\n            ImageView imageView = new ImageView(input);\n            ImageView newImage = new ImageView(input);\n            imageView.setPreserveRatio(true);\n            imageView.setFitWidth(60);\n            String type2 = allType.get(j)+\"2\";\n            Image input2 = new Image(Board.class.getResource(URI_BASE + type2 + \".png\").toString());\n            ImageView imageView2 = new ImageView(input2);\n            ImageView newImage2 = new ImageView(input2);\n            imageView2.setPreserveRatio(true);\n            imageView2.setFitWidth(60);\n\n            Character[] arr1 = {'b','o','p','r','s','y'};\n            Set<Character> setFour = new HashSet<>(Arrays.asList(arr1));\n\n            Button bt = new Button();\n            bt.setGraphic(imageView);\n            bt.setPrefWidth(60);\n            bt.setMinHeight(60);\n            bt.setContentDisplay(ContentDisplay.CENTER);\n            bt.setOnAction(e -> {\n                imageView.setRotate(imageView.getRotate() + 90);\n                bt.setGraphic(imageView);\n            });\n            bt.setOnMouseDragged(event -> {\n                AnchorPane an = new AnchorPane();\n                newImage.setRotate(imageView.getRotate());\n                newImage.setPreserveRatio(true);\n                newImage.setFitHeight(102);\n                an.getChildren().add(newImage);\n                if(setFour.contains(Character.toLowerCase(type1.charAt(0))) && ((int)imageView.getRotate() / 90) % 2 == 1 ){\n                    AnchorPane.setLeftAnchor(newImage, event.getSceneX()-80);\n                    AnchorPane.setTopAnchor(newImage, event.getSceneY()+25);\n                }\n                else if(!setFour.contains(Character.toLowerCase(type1.charAt(0))) && ((int)imageView.getRotate() / 90) % 2 == 1 ){\n                    AnchorPane.setLeftAnchor(newImage, event.getSceneX()-47);\n                    AnchorPane.setTopAnchor(newImage, event.getSceneY()+3);\n                }\n                else{\n                    AnchorPane.setLeftAnchor(newImage, event.getSceneX()-21);\n                    AnchorPane.setTopAnchor(newImage, event.getSceneY()-17);\n                }\n                pieces.getChildren().add(an);\n            });\n\n            bt.setOnMouseReleased(event -> {     // drag is complete\n                int rotate;\n                rotate = (int) newImage.getRotate()/90 % 4;\n                if(transfer(type1,rotate,event.getSceneX(),event.getSceneY())!=null) {\n                    if (canMove(transfer(type1, rotate, event.getSceneX(), event.getSceneY())) && FitGame.isPlacementValid(FitGame.sortAdd(tempGame, transfer(type1, rotate, event.getSceneX(), event.getSceneY())))\n                            && FitGame.havePiecesBeenUsed(FitGame.sortAdd(tempGame, transfer(type1, rotate, event.getSceneX(), event.getSceneY())))) {\n                        tempGame = FitGame.sortAdd(tempGame, transfer(type1, rotate, event.getSceneX(), event.getSceneY()));\n                            makePiece(tempGame);\n                            checkCompletionUi();\n                        }\n                    else{\n                        makePiece(tempGame);\n                    }\n                }\n                else {\n                    makePiece(tempGame);\n                }\n            });\n\n            Button bt2 = new Button();\n            bt2.setGraphic(imageView2);\n            bt2.setPrefWidth(60);\n            bt2.setMinHeight(60);\n            bt2.setOnAction(e -> {\n                imageView2.setRotate(imageView2.getRotate() + 90);\n                bt2.setGraphic(imageView2);\n            });\n            bt2.setOnMouseDragged(event -> {\n                AnchorPane an2 = new AnchorPane();\n                newImage2.setRotate(imageView2.getRotate());\n                newImage2.setPreserveRatio(true);\n                newImage2.setFitHeight(102);\n                an2.getChildren().add(newImage2);\n                if(setFour.contains(Character.toLowerCase(type2.charAt(0))) && ((int)imageView2.getRotate() / 90) % 2 == 1 ){\n                    AnchorPane.setLeftAnchor(newImage2, event.getSceneX()-80);\n                    AnchorPane.setTopAnchor(newImage2, event.getSceneY()+25);\n                }\n                else if(!setFour.contains(Character.toLowerCase(type2.charAt(0))) && ((int)imageView2.getRotate() / 90) % 2 == 1 ){\n                    AnchorPane.setLeftAnchor(newImage2, event.getSceneX()-47);\n                    AnchorPane.setTopAnchor(newImage2, event.getSceneY()+3);\n                }\n                else{\n                    AnchorPane.setLeftAnchor(newImage2, event.getSceneX()-21);\n                    AnchorPane.setTopAnchor(newImage2, event.getSceneY()-17);\n                }\n                pieces.getChildren().add(an2);\n            });\n            bt2.setOnMouseReleased(event -> {     // drag is complete\n                int rotate2;\n                rotate2 = (int) imageView2.getRotate()/90 % 4;\n                if(transfer(type2,rotate2,event.getSceneX(),event.getSceneY())!=null) {\n                    if (canMove(transfer(type2, rotate2, event.getSceneX(), event.getSceneY())) && FitGame.isPlacementValid(FitGame.sortAdd(tempGame, transfer(type2, rotate2, event.getSceneX(), event.getSceneY())))\n                            && FitGame.havePiecesBeenUsed(FitGame.sortAdd(tempGame, transfer(type2, rotate2, event.getSceneX(), event.getSceneY())))) {\n                        tempGame = FitGame.sortAdd(tempGame, transfer(type2, rotate2, event.getSceneX(), event.getSceneY()));\n                        makePiece(tempGame);\n                        checkCompletionUi();\n                    }\n                    else{\n                        makePiece(tempGame);\n                    }\n                }\n                else {\n                    makePiece(tempGame);\n                }\n            });\n\n            GridPane.setConstraints(bt,0,j);\n            GridPane.setConstraints(bt2,1,j);\n            selectMenu.getChildren().addAll(bt,bt2);\n        }\n        ScrollPane sp = new ScrollPane(selectMenu);\n        sp.setLayoutX(SELECT_X);\n        sp.setLayoutY(SELECT_Y);\n        sp.setPrefSize(200,500);\n        selectM.getChildren().add(sp);\n    }\n//    transfer function\n//    given a piece's type such as \"B1\", a rotate index, and its position on the UI board like (231, 255)\n//    return its PiecePlacement in FitGame class like \"B23S\".\n    public static String transfer(String Type, int rotate, double getX, double getY){\n        String ans;\n        String dir,T;\n        String[] Ty = {\"B\",\"G\",\"I\",\"L\",\"N\",\"O\",\"P\",\"R\",\"S\",\"Y\"};\n        List<String> TypeBox = Arrays.asList(Ty);\n        if (! TypeBox.contains(String.valueOf(Character.toUpperCase(Type.charAt(0))))){\n            return null;\n        }\n        if(rotate >3 || rotate <0){return null;}\n        switch (rotate){\n            case 0:\n                dir = \"N\";\n                break;\n            case 1:\n                dir = \"E\";\n                break;\n            case 2:\n                dir = \"S\";\n                break;\n            default:\n                dir = \"W\";\n        }\n        if (Type.charAt(1) == '1'){\n            T = String.valueOf(Character.toLowerCase(Type.charAt(0)));\n        }\n        else{\n            T = String.valueOf(Type.charAt(0));\n        }\n        double newX = getX - 90;\n        double newY = getY - 165;\n        if (newX < 0 || newY < 0){return null;}\n        int row = (int) newX/51;\n        int col = (int) newY/51;\n        if (row < 10 && col < 5){\n            ans = T + row + col + dir;\n            return ans;\n        }\n        else {return null;}\n    }\n\n    public static boolean canMove(String pieceType){\n        if (tempGame != null){\n            FitGame.initial();\n            for (int i=0; i<tempGame.length()/4;++i){\n                String PiecePlacement = tempGame.substring(4*i,4*(i+1));\n                FitGame.addToBoard(PiecePlacement);}\n            return FitGame.canPieceBePlaced(pieceType);}\n        return false;\n    }\n\n    private void makeControls(){\n        Text hintMassage = new Text();\n        hintMassage.setText(\"Show Hints By Pressing '/' \");\n        hintMassage.setFill(Color.BLACK);\n        hintMassage.setX(70);\n        hintMassage.setY(600);\n        hintMassage.setFont(Font.font(\"Verdana\", FontWeight.BOLD, 20));\n        Button button = new Button(\"Restart\");\n        button.setLayoutX(BOARD_X  + 20);\n        button.setLayoutY(VIEWER_HEIGHT - 175);\n        button.setPrefHeight(30);\n        button.setPrefWidth(150);\n        button.setOnAction(e -> restart());\n        Button button2 = new Button(\"New Game\");\n        button2.setLayoutX(BOARD_X + 200);\n        button2.setLayoutY(VIEWER_HEIGHT - 175);\n        button2.setPrefHeight(30);\n        button2.setPrefWidth(150);\n        button2.setOnAction(e -> newGame());\n        controls.getChildren().add(button);\n        controls.getChildren().add(button2);\n        controls.getChildren().add(hintMassage);\n\n        difficulty.setMin(1);\n        difficulty.setMax(5);\n        difficulty.setValue(0);\n        difficulty.setShowTickLabels(true);\n        difficulty.setShowTickMarks(true);\n        difficulty.setMajorTickUnit(1);\n        difficulty.setMinorTickCount(0);\n        difficulty.setSnapToTicks(true);\n        difficulty.setOnMouseClicked(e -> newGame());\n        difficulty.setLayoutX(BOARD_X  + 460);\n        difficulty.setLayoutY(VIEWER_HEIGHT - 175);\n        controls.getChildren().add(difficulty);\n\n        final Label difficultyCaption = new Label(\"Difficulty:\");\n        difficultyCaption.setTextFill(Color.GREY);\n        difficultyCaption.setLayoutX(BOARD_X + 400);\n        difficultyCaption.setLayoutY(VIEWER_HEIGHT - 170);\n        controls.getChildren().add(difficultyCaption);\n    }\n    // make completion\n    private void makeCompletion(){\n        completionText.setFill(Color.BLACK);\n        completionText.setCache(true);\n        completionText.setFont(Font.font(\"Arial\", FontWeight.EXTRA_BOLD, 80));\n        completionText.setLayoutX(170);\n        completionText.setLayoutY(100);\n        completionText.setTextAlignment(TextAlignment.CENTER);\n        root.getChildren().add(completionText);\n    }\n\n    private void checkCompletionUi(){\n        if(FitGame.checkCompletion()){\n            showCompletion();\n        }\n    }\n    // Show the completion message\n    private void showCompletion(){\n        completionText.toFront();\n        completionText.setOpacity(1);\n    }\n    // Hide the completion message\n    private void hideCompletion(){\n        completionText.toBack();\n        completionText.setOpacity(0);\n    }\n    // Start a new game, resetting everything as necessary\n    private void newGame(){\n        try {\n            hideCompletion();\n            int diff = (int) difficulty.getValue() - 1;\n            int num = (int) (Math.random()*24+diff*24);\n            Game = Games.SOLUTIONS[num].objective;\n            tempGame = Game;\n            GameSolution = Games.SOLUTIONS[num].placement;\n            makePiece(Game);\n            makeSelect();\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Uh oh. \" + e);\n            e.printStackTrace();\n            Platform.exit();\n        }\n    }\n    // Restart this game, creating a new game with the same initial state.\n    private void restart(){\n        hideCompletion();\n        pieces.getChildren().clear();\n        tempGame = Game;\n        makePiece(Game);\n        makeSelect();\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        primaryStage.setTitle(\"IQ-Fit\");\n        Scene scene = new Scene(root, VIEWER_WIDTH, VIEWER_HEIGHT);\n        scene.setOnKeyTyped(keyEvent -> {\n            if(keyEvent.getCharacter().equals(\"q\")||keyEvent.getCharacter().equals(\"Q\")){\n                Platform.exit();\n                keyEvent.consume();\n            }\n            if (keyEvent.getCharacter().equals(\"/\") || keyEvent.toString().equals(\"/\")){\n                String HintString = FitGame.findWrongPieces(tempGame, GameSolution);\n                double width = 600;\n                double height = 115;\n                GridPane HintPane = new GridPane();\n                HintPane.setPadding(new Insets(30,20,20,20));\n                HintPane.setPrefSize(width, height);\n                HintPane.setVgap(40);\n                HintPane.setHgap(20);\n                int s = HintString.length() / 2;\n                for (int i=0; i<s; ++i){\n                    String PiecePlacement = HintString.substring(2*i,2*(i+1));\n                    char color = PiecePlacement.charAt(0);\n                    char rotate = PiecePlacement.charAt(1);\n                    String type;\n                    if (Character.isLowerCase(color)){ type = String.valueOf(color).toUpperCase()+\"1\";}\n                    else{type = String.valueOf(color).toUpperCase()+\"2\";}\n                    Image image = new Image(Board.class.getResource(URI_BASE + type + \".png\").toString());\n                    ImageView imagePiece = new ImageView(image);\n                    imagePiece.setPreserveRatio(true);\n                    imagePiece.setFitHeight(45);\n                    switch (rotate){\n                        case 'N':\n                            imagePiece.setRotate(0);\n                            break;\n                        case 'E':\n                            imagePiece.setRotate(90);\n                            break;\n                        case 'S':\n                            imagePiece.setRotate(180);\n                            break;\n                        default:\n                            imagePiece.setRotate(270);\n                            break;\n                    }\n                    if (i < 5){\n                        HintPane.add(imagePiece,i, 0);}\n                    else{\n                        height = 230;\n                        HintPane.setPrefSize(width, height);\n                        HintPane.add(imagePiece,i-5, 1);}\n                }\n                Scene secondScene = new Scene(HintPane,width , height);\n                // New window (Stage)\n                Stage newWindow = new Stage();\n                newWindow.setTitle(\"Hint !\");\n                newWindow.setScene(secondScene);\n                newWindow.setX(540);\n                newWindow.setY(130);\n                newWindow.show();\n            }\n        });\n        root.getChildren().add(board);\n        root.getChildren().add(controls);\n        root.getChildren().add(pieces);\n        root.getChildren().add(selectM);\n        makeCompletion();\n        hideCompletion();\n        makeSelect();\n        makeBoard();\n        makeControls();\n        delete();\n        newGame();\n        primaryStage.setScene(scene);\n        primaryStage.show();\n    }\n//    public static void main(String[] args) {\n//        System.out.println(transfer(\"B1\", 0,230, 320));\n//    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/comp1110/ass2/gui/Board.java	(revision 91460066d60db1199a56e8ef0e61b7614eefb06a)
+++ src/comp1110/ass2/gui/Board.java	(date 1603185814244)
@@ -443,10 +443,6 @@
         primaryStage.setTitle("IQ-Fit");
         Scene scene = new Scene(root, VIEWER_WIDTH, VIEWER_HEIGHT);
         scene.setOnKeyTyped(keyEvent -> {
-            if(keyEvent.getCharacter().equals("q")||keyEvent.getCharacter().equals("Q")){
-                Platform.exit();
-                keyEvent.consume();
-            }
             if (keyEvent.getCharacter().equals("/") || keyEvent.toString().equals("/")){
                 String HintString = FitGame.findWrongPieces(tempGame, GameSolution);
                 double width = 600;
